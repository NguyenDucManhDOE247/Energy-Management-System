<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EMS - Controller</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        .device-card {
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
            margin-bottom: 1.5rem;
        }
        .device-card:hover {
            transform: translateY(-5px);
        }
        .device-header {
            padding: 15px 20px;
            background-color: #f8f9fc;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .device-body {
            padding: 20px;
            position: relative;
        }
        .device-name {
            margin: 0;
            font-weight: 600;
            font-size: 1.1rem;
        }
        .device-location {
            color: #858796;
            margin-top: 5px;
            font-size: 0.9rem;
        }
        .device-id {
            font-size: 0.8rem;
            color: #b7b9cc;
        }
        .device-status {
            display: inline-flex;
            align-items: center;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }
        .status-online {
            background-color: rgba(28, 200, 138, 0.1);
            color: #1cc88a;
        }
        .status-offline {
            background-color: rgba(231, 74, 59, 0.1);
            color: #e74a3b;
        }
        .device-info {
            display: flex;
            flex-wrap: wrap;
            margin-bottom: 20px;
        }
        .info-item {
            flex: 1;
            min-width: 120px;
            margin-bottom: 15px;
        }
        .info-label {
            display: block;
            color: #858796;
            font-size: 0.8rem;
            margin-bottom: 5px;
        }
        .info-value {
            font-size: 1.3rem;
            font-weight: 600;
        }
        .device-controls {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 20px;
        }
        .control-button {
            border: none;
            border-radius: 8px;
            padding: 12px 15px;
            cursor: pointer;
            font-weight: 600;
            font-size: 0.9rem;
            flex: 1;
            min-width: 100px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }
        .btn-power {
            background-color: #4e73df;
            color: white;
        }
        .btn-power:hover {
            background-color: #2e59d9;
        }
        .btn-power.off {
            background-color: #e74a3b;
        }
        .btn-power.off:hover {
            background-color: #d52a1a;
        }
        .btn-schedule {
            background-color: #1cc88a;
            color: white;
        }
        .btn-schedule:hover {
            background-color: #17a673;
        }
        .btn-timer {
            background-color: #36b9cc;
            color: white;
        }
        .btn-timer:hover {
            background-color: #2c9faf;
        }
        .btn-settings {
            background-color: #f6c23e;
            color: white;
        }
        .btn-settings:hover {
            background-color: #f4b619;
        }
        .timer-control {
            display: flex;
            align-items: center;
            margin-top: 10px;
            padding: 10px;
            background-color: #f8f9fc;
            border-radius: 8px;
        }
        .timer-input {
            width: 60px;
            text-align: center;
            margin: 0 10px;
            padding: 5px;
            border: 1px solid #d1d3e2;
            border-radius: 5px;
        }
        .control-label {
            display: block;
            font-size: 0.8rem;
            color: #858796;
            margin-bottom: 5px;
        }
        .power-slider {
            width: 100%;
            height: 8px;
            border-radius: 4px;
            background-color: #eaecf4;
            margin: 15px 0;
            position: relative;
        }
        .power-handle {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background-color: #4e73df;
            position: absolute;
            top: 50%;
            transform: translate(-50%, -50%);
            cursor: pointer;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
        }
        .power-value {
            font-size: 0.9rem;
            font-weight: 600;
            text-align: center;
            margin-top: 10px;
        }
        .schedule-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.9rem;
            margin-top: 15px;
        }
        .schedule-table th, .schedule-table td {
            padding: 10px;
            border: 1px solid #e3e6f0;
            text-align: center;
        }
        .schedule-table th {
            background-color: #f8f9fc;
            font-weight: 600;
        }
        .usage-history {
            margin-top: 20px;
        }
        .history-chart {
            height: 150px;
        }
        .add-device-card {
            border: 2px dashed #d1d3e2;
            border-radius: 10px;
            padding: 30px 20px;
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            height: calc(100% - 1.5rem);
            margin-bottom: 1.5rem;
        }
        .add-device-card:hover {
            border-color: #4e73df;
            background-color: rgba(78, 115, 223, 0.05);
        }
        .add-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: #4e73df;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-bottom: 15px;
        }
        .add-text {
            font-weight: 600;
            color: #5a5c69;
        }
    </style>
</head>
<body>

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <a class="navbar-brand" href="/">Energy Monitoring System</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item">
                <a class="nav-link" href="/"><i class="fas fa-tachometer-alt"></i> Dashboard</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/energy-status"><i class="fas fa-bolt"></i> Energy Status</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/database-report"><i class="fas fa-database"></i> Database Report</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/summary"><i class="fas fa-chart-bar"></i> Summary</a>
            </li>
            <li class="nav-item active">
                <a class="nav-link" href="/controller"><i class="fas fa-sliders-h"></i> Controller</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/notifications"><i class="fas fa-bell"></i> Notifications</a>
            </li>
        </ul>
        <ul class="navbar-nav">
            <li class="nav-item">
                <a class="nav-link" href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
            </li>
        </ul>
    </div>
</nav>

<div class="container-fluid my-4">
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Device Controller</h1>
        <div>
            <button id="addDevice" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm">
                <i class="fas fa-plus fa-sm text-white-50 mr-1"></i> Add New Device
            </button>
            <button id="refreshDevices" class="d-none d-sm-inline-block btn btn-sm btn-secondary shadow-sm ml-2">
                <i class="fas fa-sync-alt fa-sm text-white-50 mr-1"></i> Refresh All
            </button>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-3 col-md-4 col-sm-6">
            <div class="device-card">
                <div class="device-header">
                    <div>
                        <h5 class="device-name">Smart Plug 1</h5>
                        <div class="device-location">Living Room</div>
                    </div>
                    <div class="device-status status-online">
                        <i class="fas fa-circle mr-1"></i> Online
                    </div>
                </div>
                <div class="device-body">
                    <div class="device-id mb-3">ID: SP001</div>
                    
                    <div class="device-info">
                        <div class="info-item">
                            <span class="info-label">Power</span>
                            <span class="info-value">120W</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Voltage</span>
                            <span class="info-value">220V</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Current</span>
                            <span class="info-value">0.55A</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Energy</span>
                            <span class="info-value">0.8kWh</span>
                        </div>
                    </div>
                    
                    <div class="device-controls">
                        <button class="control-button btn-power" data-device="SP001">
                            <i class="fas fa-power-off mr-2"></i> ON
                        </button>
                        <button class="control-button btn-schedule" data-toggle="collapse" data-target="#scheduleControls1">
                            <i class="fas fa-clock mr-2"></i> Schedule
                        </button>
                        <button class="control-button btn-timer" data-toggle="collapse" data-target="#timerControls1">
                            <i class="fas fa-hourglass-half mr-2"></i> Timer
                        </button>
                        <button class="control-button btn-settings" data-toggle="collapse" data-target="#settingsControls1">
                            <i class="fas fa-cog mr-2"></i> Settings
                        </button>
                    </div>
                    
                    <div id="timerControls1" class="collapse mb-3">
                        <div class="control-label">Set Timer</div>
                        <div class="timer-control">
                            <button class="btn btn-sm btn-outline-secondary timer-btn" data-change="-10">-10m</button>
                            <input type="text" class="timer-input" value="30" maxlength="3">
                            <button class="btn btn-sm btn-outline-secondary timer-btn" data-change="10">+10m</button>
                            <button class="btn btn-sm btn-primary ml-auto timer-set">Set</button>
                        </div>
                    </div>
                    
                    <div id="scheduleControls1" class="collapse mb-3">
                        <div class="control-label">Weekly Schedule</div>
                        <table class="schedule-table">
                            <thead>
                                <tr>
                                    <th>Day</th>
                                    <th>On</th>
                                    <th>Off</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Mon-Fri</td>
                                    <td>07:00</td>
                                    <td>18:00</td>
                                    <td><button class="btn btn-sm btn-outline-danger"><i class="fas fa-trash-alt"></i></button></td>
                                </tr>
                                <tr>
                                    <td>Sat-Sun</td>
                                    <td>09:00</td>
                                    <td>22:00</td>
                                    <td><button class="btn btn-sm btn-outline-danger"><i class="fas fa-trash-alt"></i></button></td>
                                </tr>
                            </tbody>
                        </table>
                        <button class="btn btn-sm btn-primary mt-2">+ Add Schedule</button>
                    </div>
                    
                    <div id="settingsControls1" class="collapse mb-3">
                        <div class="control-label">Power Limit</div>
                        <div class="power-slider">
                            <div class="power-handle" style="left: 70%"></div>
                        </div>
                        <div class="power-value">1400W (70%)</div>
                        
                        <div class="form-group mt-3">
                            <label class="control-label">Device Name</label>
                            <input type="text" class="form-control" value="Smart Plug 1">
                        </div>
                        <div class="form-group">
                            <label class="control-label">Location</label>
                            <input type="text" class="form-control" value="Living Room">
                        </div>
                        <button class="btn btn-primary btn-sm">Save Settings</button>
                    </div>
                    
                    <div class="usage-history">
                        <div class="control-label">Usage History (24h)</div>
                        <div class="history-chart-container">
                            <canvas class="history-chart" id="historyChart1"></canvas>
                            <div class="loading-placeholder" id="loadingChart1">Loading data...</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-4 col-sm-6">
            <div class="device-card">
                <div class="device-header">
                    <div>
                        <h5 class="device-name">Smart Plug 2</h5>
                        <div class="device-location">Kitchen</div>
                    </div>
                    <div class="device-status status-online">
                        <i class="fas fa-circle mr-1"></i> Online
                    </div>
                </div>
                <div class="device-body">
                    <div class="device-id mb-3">ID: SP002</div>
                    
                    <div class="device-info">
                        <div class="info-item">
                            <span class="info-label">Power</span>
                            <span class="info-value">85W</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Voltage</span>
                            <span class="info-value">218V</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Current</span>
                            <span class="info-value">0.39A</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Energy</span>
                            <span class="info-value">0.5kWh</span>
                        </div>
                    </div>
                    
                    <div class="device-controls">
                        <button class="control-button btn-power" data-device="SP002">
                            <i class="fas fa-power-off mr-2"></i> ON
                        </button>
                        <button class="control-button btn-schedule" data-toggle="collapse" data-target="#scheduleControls2">
                            <i class="fas fa-clock mr-2"></i> Schedule
                        </button>
                        <button class="control-button btn-timer" data-toggle="collapse" data-target="#timerControls2">
                            <i class="fas fa-hourglass-half mr-2"></i> Timer
                        </button>
                        <button class="control-button btn-settings" data-toggle="collapse" data-target="#settingsControls2">
                            <i class="fas fa-cog mr-2"></i> Settings
                        </button>
                    </div>
                    
                    <div id="timerControls2" class="collapse mb-3">
                        <div class="control-label">Set Timer</div>
                        <div class="timer-control">
                            <button class="btn btn-sm btn-outline-secondary timer-btn" data-change="-10">-10m</button>
                            <input type="text" class="timer-input" value="45" maxlength="3">
                            <button class="btn btn-sm btn-outline-secondary timer-btn" data-change="10">+10m</button>
                            <button class="btn btn-sm btn-primary ml-auto timer-set">Set</button>
                        </div>
                    </div>
                    
                    <div id="scheduleControls2" class="collapse mb-3">
                        <div class="control-label">Weekly Schedule</div>
                        <table class="schedule-table">
                            <thead>
                                <tr>
                                    <th>Day</th>
                                    <th>On</th>
                                    <th>Off</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Every day</td>
                                    <td>06:30</td>
                                    <td>23:00</td>
                                    <td><button class="btn btn-sm btn-outline-danger"><i class="fas fa-trash-alt"></i></button></td>
                                </tr>
                            </tbody>
                        </table>
                        <button class="btn btn-sm btn-primary mt-2">+ Add Schedule</button>
                    </div>
                    
                    <div id="settingsControls2" class="collapse mb-3">
                        <div class="control-label">Power Limit</div>
                        <div class="power-slider">
                            <div class="power-handle" style="left: 60%"></div>
                        </div>
                        <div class="power-value">1200W (60%)</div>
                        
                        <div class="form-group mt-3">
                            <label class="control-label">Device Name</label>
                            <input type="text" class="form-control" value="Smart Plug 2">
                        </div>
                        <div class="form-group">
                            <label class="control-label">Location</label>
                            <input type="text" class="form-control" value="Kitchen">
                        </div>
                        <button class="btn btn-primary btn-sm">Save Settings</button>
                    </div>
                    
                    <div class="usage-history">
                        <div class="control-label">Usage History (24h)</div>
                        <div class="history-chart-container">
                            <canvas class="history-chart" id="historyChart2"></canvas>
                            <div class="loading-placeholder" id="loadingChart2">Loading data...</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-4 col-sm-6">
            <div class="device-card">
                <div class="device-header">
                    <div>
                        <h5 class="device-name">Smart Plug 3</h5>
                        <div class="device-location">Bedroom</div>
                    </div>
                    <div class="device-status status-offline">
                        <i class="fas fa-circle mr-1"></i> Offline
                    </div>
                </div>
                <div class="device-body">
                    <div class="device-id mb-3">ID: SP003</div>
                    
                    <div class="device-info">
                        <div class="info-item">
                            <span class="info-label">Power</span>
                            <span class="info-value">--</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Voltage</span>
                            <span class="info-value">--</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Current</span>
                            <span class="info-value">--</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Energy</span>
                            <span class="info-value">0.3kWh</span>
                        </div>
                    </div>
                    
                    <div class="device-controls">
                        <button class="control-button btn-power off" data-device="SP003" disabled>
                            <i class="fas fa-power-off mr-2"></i> OFF
                        </button>
                        <button class="control-button btn-schedule" data-toggle="collapse" data-target="#scheduleControls3" disabled>
                            <i class="fas fa-clock mr-2"></i> Schedule
                        </button>
                        <button class="control-button btn-timer" data-toggle="collapse" data-target="#timerControls3" disabled>
                            <i class="fas fa-hourglass-half mr-2"></i> Timer
                        </button>
                        <button class="control-button btn-settings" data-toggle="collapse" data-target="#settingsControls3">
                            <i class="fas fa-cog mr-2"></i> Settings
                        </button>
                    </div>
                    
                    <div id="settingsControls3" class="collapse mb-3">
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle mr-2"></i> Device is offline. Some settings may not be applied until the device is online.
                        </div>
                        
                        <div class="form-group mt-3">
                            <label class="control-label">Device Name</label>
                            <input type="text" class="form-control" value="Smart Plug 3">
                        </div>
                        <div class="form-group">
                            <label class="control-label">Location</label>
                            <input type="text" class="form-control" value="Bedroom">
                        </div>
                        <button class="btn btn-primary btn-sm">Save Settings</button>
                    </div>
                    
                    <div class="usage-history">
                        <div class="control-label">Usage History (24h)</div>
                        <div class="history-chart-container">
                            <canvas class="history-chart" id="historyChart3"></canvas>
                            <div class="loading-placeholder" id="loadingChart3">Loading data...</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-4 col-sm-6">
            <div class="add-device-card" data-toggle="modal" data-target="#addDeviceModal">
                <div class="add-icon">
                    <i class="fas fa-plus"></i>
                </div>
                <div class="add-text">Add New Device</div>
            </div>
        </div>
    </div>
</div>

<!-- Add Device Modal -->
<div class="modal fade" id="addDeviceModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Device</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Device Type</label>
                    <select class="form-control" id="deviceType">
                        <option value="tuya">Tuya Smart Plug</option>
                        <option value="tapo">TP-Link Tapo Smart Plug</option>
                        <option value="custom">Custom Device</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label>Device Name</label>
                    <input type="text" class="form-control" id="deviceName" placeholder="e.g. Living Room Plug">
                </div>
                
                <div class="form-group">
                    <label>Device Location</label>
                    <input type="text" class="form-control" id="deviceLocation" placeholder="e.g. Living Room">
                </div>
                
                <div class="form-group">
                    <label>Device ID / IP Address</label>
                    <input type="text" class="form-control" id="deviceIdentifier" placeholder="Enter device ID or IP address">
                </div>
                
                <div id="tuyaFields" class="device-specific-fields">
                    <div class="form-group">
                        <label>Device Key</label>
                        <input type="text" class="form-control" id="tuyaKey" placeholder="Enter device key">
                    </div>
                    <div class="form-group">
                        <label>Device Version</label>
                        <select class="form-control" id="tuyaVersion">
                            <option value="3.1">3.1</option>
                            <option value="3.3" selected>3.3</option>
                            <option value="3.4">3.4</option>
                        </select>
                    </div>
                </div>
                
                <div id="tapoFields" class="device-specific-fields" style="display: none;">
                    <div class="form-group">
                        <label>Username</label>
                        <input type="text" class="form-control" id="tapoUsername" placeholder="Enter Tapo username">
                    </div>
                    <div class="form-group">
                        <label>Password</label>
                        <input type="password" class="form-control" id="tapoPassword" placeholder="Enter Tapo password">
                    </div>
                </div>
                
                <div id="customFields" class="device-specific-fields" style="display: none;">
                    <div class="form-group">
                        <label>API Endpoint</label>
                        <input type="text" class="form-control" id="customEndpoint" placeholder="http://example.com/api">
                    </div>
                    <div class="form-group">
                        <label>Authentication Token</label>
                        <input type="text" class="form-control" id="customToken" placeholder="Enter auth token if required">
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveDevice">Add Device</button>
            </div>
        </div>
    </div>
</div>

<footer class="bg-light py-3 mt-auto">
    <div class="container">
        <div class="text-center">
            <span class="text-muted">Energy Monitoring System &copy; 2025</span>
        </div>
    </div>
</footer>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>

<script>
    $(document).ready(function() {
        // Power button toggle
        $('.btn-power').on('click', function() {
            const deviceId = $(this).data('device');
            const isOn = !$(this).hasClass('off');
            
            // Toggle button state
            if (isOn) {
                $(this).addClass('off').html('<i class="fas fa-power-off mr-2"></i> OFF');
            } else {
                $(this).removeClass('off').html('<i class="fas fa-power-off mr-2"></i> ON');
            }
            
            // Send command to API
            $.ajax({
                url: '/api/proxy/device/' + deviceId + '/power',
                method: 'POST',
                data: JSON.stringify({ state: !isOn }),
                contentType: 'application/json',
                success: function(response) {
                    console.log('Power state changed:', response);
                },
                error: function(error) {
                    console.error('Error changing power state:', error);
                    // Revert button state on error
                    if (isOn) {
                        $(this).removeClass('off').html('<i class="fas fa-power-off mr-2"></i> ON');
                    } else {
                        $(this).addClass('off').html('<i class="fas fa-power-off mr-2"></i> OFF');
                    }
                }
            });
        });
        
        // Timer adjustment buttons
        $('.timer-btn').on('click', function() {
            const change = parseInt($(this).data('change'));
            const input = $(this).closest('.timer-control').find('.timer-input');
            let value = parseInt(input.val()) || 0;
            
            value += change;
            if (value < 0) value = 0;
            if (value > 999) value = 999;
            
            input.val(value);
        });
        
        // Timer set button
        $('.timer-set').on('click', function() {
            const minutes = $(this).closest('.timer-control').find('.timer-input').val();
            const deviceId = $(this).closest('.device-card').find('.btn-power').data('device');
            
            alert(`Setting timer for device ${deviceId} to turn off after ${minutes} minutes`);
            
            // In a real app, you would make an API call here
            // $.post('/api/proxy/device/' + deviceId + '/timer', { minutes: minutes });
        });
        
        // Power slider dragging
        $('.power-handle').on('mousedown', function(e) {
            e.preventDefault();
            
            const slider = $(this).closest('.power-slider');
            const handle = $(this);
            const valueDisplay = $(this).closest('.device-body').find('.power-value');
            
            function handleDrag(e) {
                const sliderRect = slider[0].getBoundingClientRect();
                let position = (e.clientX - sliderRect.left) / sliderRect.width;
                
                // Constrain to slider bounds
                position = Math.max(0, Math.min(1, position));
                
                // Update handle position
                handle.css('left', position * 100 + '%');
                
                // Update power value display
                const powerWatts = Math.round(position * 2000);
                const powerPercentage = Math.round(position * 100);
                valueDisplay.text(`${powerWatts}W (${powerPercentage}%)`);
            }
            
            function stopDrag() {
                $(document).off('mousemove', handleDrag);
                $(document).off('mouseup', stopDrag);
            }
            
            $(document).on('mousemove', handleDrag);
            $(document).on('mouseup', stopDrag);
        });
        
        // Device type switcher in add device modal
        $('#deviceType').on('change', function() {
            const deviceType = $(this).val();
            
            // Hide all specific fields
            $('.device-specific-fields').hide();
            
            // Show fields for selected device type
            if (deviceType === 'tuya') {
                $('#tuyaFields').show();
            } else if (deviceType === 'tapo') {
                $('#tapoFields').show();
            } else if (deviceType === 'custom') {
                $('#customFields').show();
            }
        });
        
        // Save new device
        $('#saveDevice').on('click', function() {
            const deviceType = $('#deviceType').val();
            const deviceName = $('#deviceName').val();
            const deviceLocation = $('#deviceLocation').val();
            const deviceIdentifier = $('#deviceIdentifier').val();
            
            if (!deviceName || !deviceIdentifier) {
                alert('Please enter device name and ID/IP');
                return;
            }
            
            // Collect device-specific data
            let specificData = {};
            
            if (deviceType === 'tuya') {
                specificData.key = $('#tuyaKey').val();
                specificData.version = $('#tuyaVersion').val();
                
                if (!specificData.key) {
                    alert('Please enter the Tuya device key');
                    return;
                }
            } else if (deviceType === 'tapo') {
                specificData.username = $('#tapoUsername').val();
                specificData.password = $('#tapoPassword').val();
                
                if (!specificData.username || !specificData.password) {
                    alert('Please enter Tapo username and password');
                    return;
                }
            } else if (deviceType === 'custom') {
                specificData.endpoint = $('#customEndpoint').val();
                specificData.token = $('#customToken').val();
                
                if (!specificData.endpoint) {
                    alert('Please enter the API endpoint for the custom device');
                    return;
                }
            }
            
            // Prepare data to send to API
            const deviceData = {
                type: deviceType,
                name: deviceName,
                location: deviceLocation,
                identifier: deviceIdentifier,
                specificData: specificData
            };
            
            // In a real app, you would make an API call here
            console.log('Adding new device:', deviceData);
            // $.post('/api/proxy/device/add', deviceData, function(response) {
            //     window.location.reload();
            // });
            
            // For demo purposes, just show success and close modal
            alert('Device added successfully!');
            $('#addDeviceModal').modal('hide');
        });
        
        // Style for loading placeholder
        $("<style>").text(`
            .history-chart-container {
                position: relative;
                height: 150px;
            }
            .loading-placeholder {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
                background-color: rgba(248, 249, 252, 0.7);
                font-size: 0.9rem;
                color: #858796;
            }
        `).appendTo("head");

        // Initialize charts
        let charts = {};
        let chartDataCache = {};
        let chartVisibility = {};
        let chartUpdateTimers = {};
        
        // Use IntersectionObserver to only initialize charts when they are in the viewport
        const initChartObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                const chartId = entry.target.id;
                const deviceId = chartId.replace('historyChart', '');
                
                // Update display status
                chartVisibility[chartId] = entry.isIntersecting;
                
                if (entry.isIntersecting) {
                    // Initialize chart if it doesn't exist
                    if (!charts[chartId]) {
                        loadChartData(chartId, deviceId);
                    }
                } else {
                    // Stop updates when chart is not visible
                    if (chartUpdateTimers[chartId]) {
                        clearTimeout(chartUpdateTimers[chartId]);
                    }
                }
            });
        }, {
            threshold: 0.1 // Only need to display 10% of the chart to trigger
        });
        
        // Register all canvas elements for Observer
        document.querySelectorAll('.history-chart').forEach(canvas => {
            initChartObserver.observe(canvas);
        });
        
        function loadChartData(chartId, deviceId) {
            // Display loading
            $(`#loading${chartId}`).show();
            
            // In a real environment, this is where you would call the API
            // Example: $.get('/api/device/${deviceId}/history/24h')
            
            // Simulate loading data from server
            setTimeout(() => {
                const isOnline = $(`#loading${chartId}`).closest('.device-card').find('.device-status').hasClass('status-online');
                
                // Create simulated data with limited data points
                const MAX_DATA_POINTS = 24; // Limit number of data points
                const hours = Array.from({length: MAX_DATA_POINTS}, (_, i) => 23 - i + ':00');
                
                let data;
                if (isOnline) {
                    data = Array.from({length: MAX_DATA_POINTS}, () => Math.random() * 150 + 50);
                } else {
                    // For offline device, show past data and then zeros
                    data = Array.from({length: MAX_DATA_POINTS}, (_, i) => {
                        if (i < 8) return 0; // Last 8 hours offline
                        return Math.random() * 130 + 40;
                    });
                }
                
                // Save data to cache
                chartDataCache[chartId] = {
                    labels: hours,
                    data: data,
                    isOnline: isOnline
                };
                
                // Initialize or update chart
                initOrUpdateChart(chartId);
                
                // Hide loading
                $(`#loading${chartId}`).hide();
                
                // Schedule update of new data after 5 minutes (300000ms)
                // but only when the chart is still visible
                chartUpdateTimers[chartId] = setTimeout(() => {
                    if (chartVisibility[chartId]) {
                        loadChartData(chartId, deviceId);
                    }
                }, 300000);
            }, 500);
        }
        
        function initOrUpdateChart(chartId) {
            const ctx = document.getElementById(chartId);
            if (!ctx) return; // Skip if canvas doesn't exist
            
            const cachedData = chartDataCache[chartId];
            if (!cachedData) return; // Skip if no data available
            
            // If chart already exists, update it instead of creating a new one
            if (charts[chartId]) {
                charts[chartId].data.labels = cachedData.labels;
                charts[chartId].data.datasets[0].data = cachedData.data;
                charts[chartId].update('none'); // Update without animation
                return;
            }
            
            // Initialize new chart with performance optimization
            charts[chartId] = new Chart(ctx.getContext('2d'), {
                type: 'line',
                data: {
                    labels: cachedData.labels,
                    datasets: [{
                        label: 'Power (W)',
                        data: cachedData.data,
                        borderColor: '#4e73df',
                        backgroundColor: 'rgba(78, 115, 223, 0.1)',
                        borderWidth: 2,
                        pointRadius: 0, // Don't display points to improve performance
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    animation: false, // Turn off animation to improve performance
                    plugins: {
                        legend: {
                            display: false // Don't display legend
                        },
                        tooltip: {
                            enabled: false // Turn off tooltip to improve performance
                        }
                    },
                    scales: {
                        x: {
                            display: false // Don't display x-axis
                        },
                        y: {
                            display: false, // Don't display y-axis
                            beginAtZero: true
                        }
                    },
                    elements: {
                        line: {
                            tension: 0.3 // Reduce tension to simplify the drawing
                        }
                    }
                }
            });
        }
        
        // Destroy all charts when needed
        function destroyAllCharts() {
            Object.values(charts).forEach(chart => {
                if(chart) {
                    chart.destroy();
                }
            });
            
            // Clear all update timers
            Object.values(chartUpdateTimers).forEach(timer => {
                clearTimeout(timer);
            });
            
            charts = {};
            chartUpdateTimers = {};
        }
        
        // Refresh all devices
        $('#refreshDevices').on('click', function() {
            $(this).find('i').addClass('fa-spin');
            
            // Simulate refreshing data
            setTimeout(function() {
                // In a real app, you would fetch updated data from the API
                // and update the UI accordingly
                
                // For demo, just update with random values
                $('.device-card').each(function() {
                    if ($(this).find('.device-status').hasClass('status-online')) {
                        const power = Math.floor(Math.random() * 150 + 50);
                        const voltage = Math.floor(Math.random() * 10 + 215);
                        const current = (power / voltage).toFixed(2);
                        
                        $(this).find('.info-item:eq(0) .info-value').text(power + 'W');
                        $(this).find('.info-item:eq(1) .info-value').text(voltage + 'V');
                        $(this).find('.info-item:eq(2) .info-value').text(current + 'A');
                    }
                });
                
                // Refresh charts selectively - only refresh charts that are visible
                Object.keys(chartVisibility).forEach(chartId => {
                    if (chartVisibility[chartId]) {
                        const deviceId = chartId.replace('historyChart', '');
                        loadChartData(chartId, deviceId);
                    }
                });
                
                $('#refreshDevices').find('i').removeClass('fa-spin');
                alert('All devices refreshed');
            }, 2000);
        });
        
        // Add beforeunload event to stop all timers
        $(window).on('beforeunload', function() {
            destroyAllCharts();
        });
    });
</script>
</body>
</html>
